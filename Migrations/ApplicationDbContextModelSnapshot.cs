// <auto-generated />
using System;
using Ciel.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ciel.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ciel.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Ciel.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EGN")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Ciel.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Ciel.Models.Cart_Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("Cart_Products");
                });

            modelBuilder.Entity("Ciel.Models.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CatalogName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Catalogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CatalogName = "Околоочна зона"
                        },
                        new
                        {
                            Id = 2,
                            CatalogName = "Вежди и мигли"
                        },
                        new
                        {
                            Id = 3,
                            CatalogName = "Устни"
                        },
                        new
                        {
                            Id = 4,
                            CatalogName = "Цялостна грижа"
                        },
                        new
                        {
                            Id = 5,
                            CatalogName = "Аксесоари"
                        });
                });

            modelBuilder.Entity("Ciel.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Ciel.Models.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Ciel.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CatalogId = 3,
                            Description = "В днешно време задължителен за гримьорите, Dior Lip Glow се предлага като блестящо масло за устни, което защитава и подобрява структурата на устните в дълбочина, като трайно подчертава естествения им цвят. С технологията Color Reviver, маслото Lip Glow Oil въздейства директно върху нивото на влага на устните, за да създаде желания цвят, като същевременно осигурява трайна хидратация.",
                            Picture = "image1.jpg",
                            Price = 77.900000000000006,
                            ProductName = "Dior Addict - олио за устни"
                        },
                        new
                        {
                            Id = 2,
                            CatalogId = 4,
                            Description = "Химическият пилинг The Ordinary AHA 30% + BHA 2% Peeling Solution се грижи за ексфолиране на кожата – повърхностно и в дълбочина. Действа с изключително висока интензивност, но благодарение на добавените хидратиращи съставки и на това, че стойностите на pKa и pH са балансирани, минимизира риска от раздразнение.",
                            Picture = "image2.jpg",
                            Price = 21.0,
                            ProductName = "The Ordinary AHA 30% + BHA 2% - пилинг за лице "
                        },
                        new
                        {
                            Id = 3,
                            CatalogId = 1,
                            Description = "Кремът за сияен околоочен контур Filorga Oxygen-Glow ще направи погледа ви неустоимо бляскав. Той ще ви отърве от уморените очи, ще изглади фините бръчки и ще озари кожата ви по естествен начин.",
                            Picture = "image3.jpg",
                            Price = 51.399999999999999,
                            ProductName = "FILORGA OXYGEN-GLOW - околоочен крем"
                        },
                        new
                        {
                            Id = 4,
                            CatalogId = 2,
                            Description = "Серумът The Ordinary Multi-Peptide Lash and Brow Serum ще се погрижи за интензивното подхранване на косъмчетата на веждите и миглите. Подпомага укрепването на отделните косъмчета така, че само след 4 седмици ще забележите видими резултати – увеличен обем, плътност и цялостно по-здрав вид на веждите и миглите.",
                            Picture = "image4.jpg",
                            Price = 31.0,
                            ProductName = "The Ordinary - серум за вежди и мигли "
                        },
                        new
                        {
                            Id = 5,
                            CatalogId = 4,
                            Description = "Слънцезащитният крем Dior Solar The Protective Creme SPF 30 защитава лицето от UVA/UVB лъчите. Свежата му текстура моментално се разнася и попива в кожата за приятно усещане. След нанасянето кожата е хидратирана, видимо по-красива и подобрена със сатенен блясък. При продължителна употреба тенът става все по-красив.",
                            Picture = "image5.jpg",
                            Price = 80.900000000000006,
                            ProductName = "Dior - слънцезащитен крем"
                        },
                        new
                        {
                            Id = 6,
                            CatalogId = 1,
                            Description = "Осигурете на зоната около очите необходимата грижа, която ще я подсили и подмлади. Мултикоригиращият очен крем Filorga NCEF Reverse Eyes бързо попива в кожата, като освобождава уникалния ревитализиращ NCEF комплекс. Той е съставен от 50 активни вещества в такива високи концентрации, каквито се използват в мезотерапиите.",
                            Picture = "image6.jpg",
                            Price = 102.40000000000001,
                            ProductName = "FILORGA - околоочен крем"
                        },
                        new
                        {
                            Id = 7,
                            CatalogId = 3,
                            Description = "Подчертайте естествената красота на устните си и оптично им придайте обем в една стъпка. Блясъкът за устни с хидратиращ ефект Clarins Lip Make-Up Instant Light с 3D ефект дарява устните с впечатляваща плътност, оцветява ги леко и същевременно ги подхранва.",
                            Picture = "image7.jpg",
                            Price = 33.990000000000002,
                            ProductName = "Clarins - блясък за устни"
                        },
                        new
                        {
                            Id = 8,
                            CatalogId = 2,
                            Description = "Изхвърлете изкуствените мигли и заложете на естествената красота. Серумът за растеж на миглите L’biotica ActiveLash ги удължава, подсилва и укрепва само след един месец. Активните съставки стимулират растежа на естествените мигли, предотвратяват падането им и удължават фазата им на растеж.",
                            Picture = "image8.jpg",
                            Price = 29.100000000000001,
                            ProductName = "L’biotica Repair Lash - серум за растеж на мигли"
                        },
                        new
                        {
                            Id = 9,
                            CatalogId = 1,
                            Description = "Околоочният серум The Ordinary Multi-Peptide Eye Serum се насочва към най-честите прояви на стареене или умора. В една стъпка ви помага да редуцирате бръчките, отоците, торбичките и тъмните кръгове под очите – успява да направи това благодарение на изключително високата концентрация на активни вещества, включващи цяла серия от патентовани пептидни технологии.",
                            Picture = "image9.jpg",
                            Price = 52.0,
                            ProductName = "The Ordinary - озаряващ серум за околоочната зона"
                        },
                        new
                        {
                            Id = 10,
                            CatalogId = 2,
                            Description = "За вашият безупречен външен вид с доказан резултат ще се погрижи тази маска за вежди Make up Revolution Rehab. Тя не съдържа в себе си никакви животински съставки и може да се използва за устни и мигли със същия успех. ",
                            Picture = "image10.jpg",
                            Price = 12.199999999999999,
                            ProductName = "Makeup Revolution - маска за вежди"
                        },
                        new
                        {
                            Id = 11,
                            CatalogId = 3,
                            Description = "Докато се отдавате на необезпокояван от нищо сън, изглаждащият серум Estée Lauder Pure Color Envy Nighttime Rescue Lip Oil-Serum ще се погрижи за устните ви. Изглажда фините линии и бръчките, успокоява устните и ги оставя здрави, меки и съвършено нежни.",
                            Picture = "image11.jpg",
                            Price = 58.100000000000001,
                            ProductName = "Estée Lauder - изглаждащ серум за устни"
                        },
                        new
                        {
                            Id = 12,
                            CatalogId = 4,
                            Description = "Лекият нощен анти-ейдж крем Neutrogena Retinol Boost се абсорбира бързо след нанасяне и освобождава в повърхностните слоеве на кожата чист ретинол.",
                            Picture = "image12.jpg",
                            Price = 58.100000000000001,
                            ProductName = "Neutrogena - нощен крем"
                        },
                        new
                        {
                            Id = 13,
                            CatalogId = 1,
                            Description = "Възвърнете младежкия вид на очите си. Опитайте възстановяващата сила на екстракта от рози Grand Rose, култовата съставка на марката Lancôme. Ревитализиращият очен серум Lancôme Absolue видимо изглажда, омекотява и стяга контурите на очите и гарантира по-сияйна околоочна зона без бръчки.",
                            Picture = "image13.jpg",
                            Price = 270.0,
                            ProductName = "Lancôme - серум за очи"
                        },
                        new
                        {
                            Id = 14,
                            CatalogId = 2,
                            Description = "Продуктът Beauty Jar Second Chance подчертава вашия поглед и изтъква красотата на очите ви.",
                            Picture = "image14.png",
                            Price = 10.9,
                            ProductName = "Beauty Jar - подхранващо масло за вежди"
                        },
                        new
                        {
                            Id = 15,
                            CatalogId = 3,
                            Description = "Завидна усмивка с меки и чувствени устни. Възобновяващият балсам за устни Estée Lauder Pure Color Envy Lip Repair Potion омекотява и изглажда устните, като същевременно дефинира външния им вид. Богат на масла, балсамът действа като регенерираща терапия през нощта и предава на устните страхотен вид. Благодарение на апликатора-пръчка, балсамът се нанася лесно и бързо, дори и в най-забързаните моменти.",
                            Picture = "image15.jpg",
                            Price = 69.5,
                            ProductName = "Estée Lauder - възстановяващ балсам за устни"
                        },
                        new
                        {
                            Id = 16,
                            CatalogId = 4,
                            Description = "Имате ли усещането, че в момента кожата на лицето ви не е в оптимална кондиция и ви трябва нещо повече, освен грижата, предлагана от крема? Маската за лице Symbiosis London Age Illuminating Cannabidiol обогатява чудесно ежедневната ви рутина – глези кожата и ѝ осигурява интензивна грижа, която носи незабавно подобряване на външния ѝ вид.",
                            Picture = "image16.jpg",
                            Price = 76.200000000000003,
                            ProductName = "Symbiosis London - маска за лице"
                        },
                        new
                        {
                            Id = 17,
                            CatalogId = 5,
                            Description = "Масажорът е изработен от розов кварц от Южна Африка и разполага с бамбукова дръжка и две различни по големина ролки в двата си края. По-малката е подходяща за по-деликатните зони на лицето, а по-голямата е чудесна за масаж на по-големи зони от кожата.",
                            Picture = "image17.jpg",
                            Price = 27.899999999999999,
                            ProductName = "Масажор за лице"
                        },
                        new
                        {
                            Id = 18,
                            CatalogId = 5,
                            Description = "Малка ексфолираща гъба, която в комбинация с любим измиващ продукт ще почисти ефективно кожата на лицето Ви. Изработена е с фина плетка, която осигурява ексфолиращия ефект и премахва мъртвите клетки, разкривайки по-меката и сияйна кожа на лицето.",
                            Picture = "image18.jpg",
                            Price = 9.8000000000000007,
                            ProductName = "Гъба за почистване на лице"
                        });
                });

            modelBuilder.Entity("Ciel.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ciel.Models.Cart", b =>
                {
                    b.HasOne("Ciel.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ciel.Models.Cart_Product", b =>
                {
                    b.HasOne("Ciel.Models.Cart", "Cart")
                        .WithMany("Products")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ciel.Models.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ciel.Models.Order", b =>
                {
                    b.HasOne("Ciel.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Ciel.Models.OrderProduct", b =>
                {
                    b.HasOne("Ciel.Models.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ciel.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ciel.Models.Product", b =>
                {
                    b.HasOne("Ciel.Models.Catalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("Ciel.Models.Review", b =>
                {
                    b.HasOne("Ciel.Models.Product", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ciel.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ciel.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ciel.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ciel.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ciel.Models.Cart", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ciel.Models.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ciel.Models.Product", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
